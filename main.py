# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PassManagerDesign.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sqlite3 as sq
from os import path
from random import sample
from string import ascii_letters
from PyQt5 import QtCore, QtGui, QtWidgets
from clipboard import copy
letters = ascii_letters
nums = '0123456789'
spe = '!@#$%&*_-'
symbols = letters + nums + spe

class Ui_Form(object):
    def __init__(self):
        self.listPages = {}
        self.page_n = 1
        self.list = []
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(787, 469)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/home/personal.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        self.passval = QtWidgets.QLineEdit(Form)
        self.passval.setGeometry(QtCore.QRect(426, 240, 270, 25))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.passval.sizePolicy().hasHeightForWidth())
        self.passval.setSizePolicy(sizePolicy)
        # self.passval.setReadOnly(True)
        self.passval.setObjectName("passval")
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setGeometry(QtCore.QRect(18, 10, 331, 401))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())
        self.tableWidget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tableWidget.setFont(font)
        self.tableWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tableWidget.setAutoFillBackground(False)
        self.tableWidget.setLineWidth(1)
        self.tableWidget.setShowGrid(True)
        self.tableWidget.setGridStyle(QtCore.Qt.SolidLine)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(10)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.nameval = QtWidgets.QLineEdit(Form)
        self.nameval.setGeometry(QtCore.QRect(426, 80, 270, 25))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nameval.sizePolicy().hasHeightForWidth())
        self.nameval.setSizePolicy(sizePolicy)
        self.nameval.setObjectName("nameval")
        self.lenval = QtWidgets.QLineEdit(Form)
        self.lenval.setGeometry(QtCore.QRect(426, 160, 270, 25))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lenval.sizePolicy().hasHeightForWidth())
        self.lenval.setSizePolicy(sizePolicy)
        self.lenval.setObjectName("lenval")
        self.savebtn = QtWidgets.QPushButton(Form)
        self.savebtn.setGeometry(QtCore.QRect(430, 390, 270, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.savebtn.sizePolicy().hasHeightForWidth())
        self.savebtn.setSizePolicy(sizePolicy)
        self.savebtn.setObjectName("savebtn")
        self.deletebtn = QtWidgets.QPushButton(Form)
        self.deletebtn.setGeometry(QtCore.QRect(430, 300, 130, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.deletebtn.sizePolicy().hasHeightForWidth())
        self.deletebtn.setSizePolicy(sizePolicy)
        self.deletebtn.setObjectName("deletebtn")
        self.lenlbl = QtWidgets.QLabel(Form)
        self.lenlbl.setGeometry(QtCore.QRect(700, 160, 81, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lenlbl.sizePolicy().hasHeightForWidth())
        self.lenlbl.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("IRNazanin")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lenlbl.setFont(font)
        self.lenlbl.setObjectName("lenlbl")
        self.next_pagebtn = QtWidgets.QPushButton(Form)
        self.next_pagebtn.setGeometry(QtCore.QRect(188, 430, 161, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.next_pagebtn.sizePolicy().hasHeightForWidth())
        self.next_pagebtn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.next_pagebtn.setFont(font)
        self.next_pagebtn.setToolTip("")
        self.next_pagebtn.setToolTipDuration(2)
        self.next_pagebtn.setWhatsThis("")
        self.next_pagebtn.setObjectName("next_pagebtn")
        self.namelbl = QtWidgets.QLabel(Form)
        self.namelbl.setGeometry(QtCore.QRect(700, 80, 40, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.namelbl.sizePolicy().hasHeightForWidth())
        self.namelbl.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("IRNazanin")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.namelbl.setFont(font)
        self.namelbl.setObjectName("namelbl")
        self.generatebtn = QtWidgets.QPushButton(Form)
        self.generatebtn.setGeometry(QtCore.QRect(570, 300, 130, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.generatebtn.sizePolicy().hasHeightForWidth())
        self.generatebtn.setSizePolicy(sizePolicy)
        self.generatebtn.setObjectName("generatebtn")
        self.searchbtn = QtWidgets.QPushButton(Form)
        self.searchbtn.setGeometry(QtCore.QRect(570, 340, 130, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.searchbtn.sizePolicy().hasHeightForWidth())
        self.searchbtn.setSizePolicy(sizePolicy)
        self.searchbtn.setObjectName("searchbtn")
        self.pre_pagebtn = QtWidgets.QPushButton(Form)
        self.pre_pagebtn.setGeometry(QtCore.QRect(20, 430, 161, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pre_pagebtn.sizePolicy().hasHeightForWidth())
        self.pre_pagebtn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pre_pagebtn.setFont(font)
        self.pre_pagebtn.setObjectName("pre_pagebtn")
        self.cpybtn = QtWidgets.QPushButton(Form)
        self.cpybtn.setGeometry(QtCore.QRect(430, 340, 130, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cpybtn.sizePolicy().hasHeightForWidth())
        self.cpybtn.setSizePolicy(sizePolicy)
        self.cpybtn.setObjectName("cpybtn")
        self.passlbl = QtWidgets.QLabel(Form)
        self.passlbl.setGeometry(QtCore.QRect(710, 240, 51, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.passlbl.sizePolicy().hasHeightForWidth())
        self.passlbl.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("IRNazanin")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.passlbl.setFont(font)
        self.passlbl.setObjectName("passlbl")
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.shortcut = QtWidgets.QShortcut(QtGui.QKeySequence("Ctrl+s"),
                                            Form)
        self.shortcut.activated.connect(self.savePass)

        self.generatebtn.clicked.connect(self.genPass)
        self.savebtn.clicked.connect(self.savePass)
        self.cpybtn.clicked.connect(self.copy)
        self.deletebtn.clicked.connect(self.delRow)
        self.searchbtn.clicked.connect(self.searchPass)
        self.nameval.returnPressed.connect(self.genPass)
        self.lenval.returnPressed.connect(self.genPass)
        self.next_pagebtn.clicked.connect(self.next_p)
        self.pre_pagebtn.clicked.connect(self.previosPageShow)
        # self.nameval.returnPressed.connect(self.savePass)
        # self.lenval.returnPressed.connect(self.savePass)


        if not path.exists("passdb.db"):
            self.con = sq.connect("passdb.db")
            self.db = self.con.cursor()
            self.db.execute('''CREATE TABLE passwords
                              (name text UNIQUE , pass text, length INTEGER)''')
        else:
            self.con = sq.connect("passdb.db")
            self.db = self.con.cursor()
            self.showData()

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def previosPageShow(self):
        if self.page_n == 1:
            return

        if str(self.page_n-1) in self.listPages:
            prev_Page = self.listPages[str(self.page_n-1)]
        else:
            return
        self.page_n -= 1
        for i in range(len(prev_Page)):
            self.db.execute("SELECT * FROM passwords WHERE  name=?", (prev_Page[i][0],))
            finds = self.db.fetchall()

            item = QtWidgets.QTableWidgetItem()
            item.setText(prev_Page[i][0])
            self.tableWidget.setItem(i, 0, item)

            item2 = QtWidgets.QTableWidgetItem()
            item2.setText(finds[0][1])
            self.tableWidget.setItem(i, 1, item2)

    def showData(self):
        self.db.execute("SELECT name FROM passwords ORDER BY name LIMIT 10")
        self.list = self.db.fetchall()
        self.listPages[str(self.page_n)] = self.list

        for i in range(len(self.list)):
            self.db.execute("SELECT * FROM passwords WHERE  name=?", (self.list[i][0],))
            self.finds = self.db.fetchall()

            item = QtWidgets.QTableWidgetItem()
            item.setText(self.list[i][0])
            self.tableWidget.setItem(i, 0, item)

            item2 = QtWidgets.QTableWidgetItem()
            item2.setText(self.finds[0][1])
            self.tableWidget.setItem(i, 1, item2)

    def next_p(self):
        try:
            self.db.execute('SELECT name FROM passwords ORDER BY name LIMIT 10 OFFSET ?', (str(self.page_n * 10),))
            self.list = self.db.fetchall()

            if len(self.list) > 0:
                self.page_n += 1
                self.listPages[str(self.page_n)] = self.list
                for i in range(len(self.list)):
                    self.db.execute("SELECT * FROM passwords WHERE  name=?", (self.list[i][0],))
                    finds = self.db.fetchall()

                    self.item = QtWidgets.QTableWidgetItem()
                    self.item.setText(self.list[i][0])
                    self.tableWidget.setItem(i, 0, self.item)

                    self.item2 = QtWidgets.QTableWidgetItem()
                    self.item2.setText(finds[0][1])
                    self.tableWidget.setItem(i, 1, self.item2)
                if len(self.list) < 10:
                    for i in range((len(self.list)), 10):
                        self.item = QtWidgets.QTableWidgetItem()
                        self.item.setText('')
                        self.tableWidget.setItem(i, 0, self.item)

                        self.item2 = QtWidgets.QTableWidgetItem()
                        self.item2.setText('')
                        self.tableWidget.setItem(i, 1, self.item2)
        except Exception as ex:
            pass

    def genPass(self):
        if (not self.lenval.text() == '') and (not self.nameval.text() == '') and self.lenval.text().isdigit:
            try:
                self.searchPass()
                if self.searchPass() == False:
                    self.password = ''.join(sample(symbols, int(self.lenval.text())))
                    self.passval.setText(self.password)
                else:
                    self.passval.setText("Already Exist")
            except Exception as ex:
                    self.passval.setText("Please Enter an Integer Number as length")
                #"Please Enter an Integer Number as length"

        else:
            self.passval.text = "Saving was Unsuccessfull! Please fill all fields"

    def savePass(self):
        if (not self.passval.text() == '') and (not self.nameval.text() == ''):
            self.lenval.setText(str(len(self.passval.text())))
            try:
                self.db.execute(
                    "INSERT INTO passwords VALUES (?, ?, ?)",
                    (self.nameval.text(), self.passval.text(), self.lenval.text()))
                self.passval.setText("Saving was successfull")
                self.con.commit()
                self.showData()
            except Exception as ex:
                self.passval.setText(ex.__str__())
        else:
            self.passval.setText("Saving was Unsuccessfull! Please fill all fields")

    def searchPass(self):
        if not self.nameval.text() == '':
            # self.passval.setText("Ok:)")
            # for row in self.db.execute('SELECT * FROM passwords ORDER BY name'):
            #     print(row)
            self.db.execute("SELECT * FROM passwords WHERE name=?", (self.nameval.text(),))
            self.finds = self.db.fetchall()
            if len(self.finds) != 0:
                self.passval.setText(self.finds[0][1])
                return True
                # self.lenval.setText(str(self.finds[0][2]))
            else:
                self.passval.setText("not Found")
                return False
        else:
            self.passval.setText("Searching was Unsuccessfull! Please fill all fields")
            return False

    def copy(self):
        if self.passval.text() != '':
            copy(self.passval.text())
            self.pos = QtCore.QPoint(self.cpybtn.pos().x() + Form.pos().x(),
                                     self.cpybtn.pos().y() + Form.pos().y())
            QtWidgets.QToolTip.showText(self.pos, "کپی شد", Form)

    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key_Enter:
            self.genPass()
        # if event.key() == QtCore.Qt.Key_Save:
        #     self.savePass()

    def delRow(self):
        if self.nameval.text() != '':
            self.searchPass()
            if self.passval.text() != "not Found":
                try:
                    self.db.execute("DELETE FROM passwords WHERE name=?", (self.nameval.text(),))
                    self.con.commit()
                    self.passval.setText("Deleted")
                    pos = QtCore.QPoint(self.cpybtn.pos().x() + Form.pos().x(), self.cpybtn.pos().y() + Form.pos().y())
                    QtWidgets.QToolTip.showText(pos, "حذف شد", Form)
                    self.showData()
                except:
                    self.passval.setText("Not Found")
        else:
            self.passval.setText("Please fill the name field ")

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Password Manager"))
        item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("Form", "1"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText(_translate("Form", "2"))
        item = self.tableWidget.verticalHeaderItem(2)
        item.setText(_translate("Form", "3"))
        item = self.tableWidget.verticalHeaderItem(3)
        item.setText(_translate("Form", "4"))
        item = self.tableWidget.verticalHeaderItem(4)
        item.setText(_translate("Form", "5"))
        item = self.tableWidget.verticalHeaderItem(5)
        item.setText(_translate("Form", "6"))
        item = self.tableWidget.verticalHeaderItem(6)
        item.setText(_translate("Form", "7"))
        item = self.tableWidget.verticalHeaderItem(7)
        item.setText(_translate("Form", "8"))
        item = self.tableWidget.verticalHeaderItem(8)
        item.setText(_translate("Form", "9"))
        item = self.tableWidget.verticalHeaderItem(9)
        item.setText(_translate("Form", "10"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "نام"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "پسورد"))
        self.savebtn.setText(_translate("Form", "ذخیره"))
        self.deletebtn.setText(_translate("Form", "حذف"))
        self.lenlbl.setText(_translate("Form", "طول پسورد:"))
        self.next_pagebtn.setText(_translate("Form", ">>"))
        self.namelbl.setText(_translate("Form", "نام:"))
        self.generatebtn.setText(_translate("Form", "ایجاد پسورد"))
        self.searchbtn.setText(_translate("Form", "جستجو براساس نام"))
        self.pre_pagebtn.setText(_translate("Form", "<<"))
        self.cpybtn.setText(_translate("Form", "کپی پسورد"))
        self.passlbl.setText(_translate("Form", "پسورد:"))


import res_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
