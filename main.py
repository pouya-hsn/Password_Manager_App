# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PassManagerDesign.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import PassGenerator
import Ui_Form
from clipboard import copy
import DB_Controller as db
import os


def updateLog(string):
    try:
        f = open("log.txt", "w")
        f.writelines([string])
        f.close()
        return True
    except:
        return False


class Logic(object):
    def __init__(self, Form):
        if os.path.getsize("log.txt"):
            f = open("log.txt", "r+")
            self.dataBasePath = f.readlines()[0]
            f.close()
        else:
            self.dataBasePath = "passdb.db"

        self.form = Form
        self.ui = Ui_Form.Ui_home()
        self.ui.setupUi(self.form)
        self.listPages = {}
        self.page_n = 1

        self.ui.shortcut_save = QtWidgets.QShortcut(QtGui.QKeySequence("Ctrl+s"),
                                                    self.form)
        self.ui.shortcut_save.activated.connect(self.savePass)

        self.ui.generatebtn.clicked.connect(self.genPass)
        self.ui.savebtn.clicked.connect(self.savePass)
        self.ui.cpybtn.clicked.connect(self.copy)
        self.ui.deletebtn.clicked.connect(self.delRow)
        self.ui.searchbtn.clicked.connect(self.searchPass)
        self.ui.nameval.returnPressed.connect(self.genPass)
        self.ui.lenval.returnPressed.connect(self.genPass)
        self.ui.next_pagebtn.clicked.connect(self.next_p)
        self.ui.pre_pagebtn.clicked.connect(self.previosPageShow)
        self.ui.SelectDB.triggered.connect(self.SelectDataBase)
        self.ui.CreateDB.triggered.connect(self.CreateDataBase)
        self.ui.nameval.setClearButtonEnabled(True)

        self.db = db.db_Controller(self.dataBasePath)
        self.refreshTable()

    def SelectDataBase(self):
        try:
            options = QtWidgets.QFileDialog.Options()
            options |= QtWidgets.QFileDialog.DontUseNativeDialog
            filePath, _ = QtWidgets.QFileDialog.getOpenFileName(self.form, "Select Data Base", "",
                                                                "DataBase Files (*.db)")
            if str(filePath) != self.dataBasePath and updateLog(filePath):
                self.dataBasePath = filePath
                self.db = db.db_Controller(self.dataBasePath)
                self.refreshTable()
        finally:
            pass

    def CreateDataBase(self):
        try:
            filePath, _ = QtWidgets.QFileDialog.getSaveFileName(self.form, "Create a Data Base", "",
                                                                "DataBase Files (*.db)")
            if str(filePath) != self.dataBasePath and updateLog(filePath):
                self.dataBasePath = filePath
                self.db = db.db_Controller(self.dataBasePath)
                self.refreshTable()
        finally:
            pass

    def previosPageShow(self):
        if self.page_n == 1:
            return

        if str(self.page_n - 1) in self.listPages:
            prev_Page = self.listPages[str(self.page_n - 1)]
        else:
            return
        self.page_n -= 1
        self.ShowListTable(prev_Page)

    def refreshTable(self):
        listTable = self.db.SelectOnePage(0)
        self.listPages[str(self.page_n)] = listTable
        self.ShowListTable(listTable)

    def next_p(self):
        try:
            listSelect = self.db.SelectOnePage(self.page_n)
            if len(listSelect) > 0:
                self.page_n += 1
                self.listPages[str(self.page_n)] = listSelect
                self.ShowListTable(listSelect)
                if len(listSelect) < 10:
                    for i in range((len(listSelect)), 10):
                        item = QtWidgets.QTableWidgetItem()
                        item.setText('')
                        self.ui.tableWidget.setItem(i, 0, item)

                        item2 = QtWidgets.QTableWidgetItem()
                        item2.setText('')
                        self.ui.tableWidget.setItem(i, 1, item2)

                        item3 = QtWidgets.QTableWidgetItem()
                        item3.setText('')
                        self.ui.tableWidget.setItem(i, 1, item3)
        except Exception as ex:
            print(ex.__str__())

    def genPass(self):
        if len(self.db.SelectItem(self.ui.nameval.text())):
            self.ui.passval.setText("Already Exist")
            self.ui.lenval.setText('')
            return
        if (self.ui.lenval.text() == '') or (self.ui.nameval.text() == ''):
            self.ui.passval.setText("Generating was Unsuccessfull! Please fill all fields")
            return
        if not self.ui.lenval.text().isdigit():
            self.ui.passval.setText("Please Enter an Integer Number as length")
            return
        try:
            self.ui.passval.setText(PassGenerator.generate(self.ui.lenval.text()))
        finally:
            pass

    def savePass(self):
        if (self.ui.lenval.text() == '') or (self.ui.nameval.text() == '') or self.ui.passval.text() == '':
            self.ui.passval.setText("Generating was Unsuccessfull! Please fill all fields")
            return False
        elif len(self.db.SelectItem(self.ui.nameval.text())):
            self.ui.passval.setText("Already Exist")
            self.ui.lenval.setText('')
        else:
            self.ui.lenval.setText(str(len(self.ui.passval.text())))
            try:
                status = self.db.Insert(self.ui.nameval.text(), self.ui.userNameVal.text(),
                                        self.ui.passval.text(), self.ui.lenval.text())
                if status:
                    self.ShowToolTip("ذخیره شد")
                    self.refreshTable()
            except Exception as ex:
                self.ui.passval.setText(ex.__str__())
            return True

    def searchPass(self):
        if not self.ui.nameval.text() == '':
            try:
                finds = self.db.SelectItem(name=self.ui.nameval.text())
                if len(finds) == 0:
                    self.ShowToolTip("چنین موردی یافت نشد")
                    return False
                else:
                    self.ui.userNameVal.setText(finds[0][1])
                    self.ui.passval.setText(str(finds[0][2]))
                    self.ui.lenval.setText(str(finds[0][3]))
                    return True
            except Exception as ex:
                print(ex.__str__())
        else:
            self.ui.passval.setText("Searching was Unsuccessfull! Please fill all fields")
            return False

    def copy(self):
        try:
            if self.ui.passval.text() != '':
                try:
                    copy(self.ui.passval.text())
                    self.ShowToolTip("کپی شد")
                except:
                    self.ShowToolTip('مشکلی در کپی شدن پسورد پیش آمده است')
            else:
                self.ShowToolTip("محل پسورد خالی است!")
        finally:
            pass

    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key_Enter:
            self.genPass()

    def delRow(self):
        if self.ui.nameval.text() != '':

            if self.searchPass():
                try:
                    if self.db.DeleteItem(self.ui.nameval.text()):
                        self.ui.passval.setText("Deleted")
                        self.ShowToolTip("حذف شد")
                        self.refreshTable()
                except Exception as ex:
                    self.ShowToolTip("حذف به دلایل نامشخص انجام نشد")
        else:
            self.ui.passval.setText("Please fill the name field ")

    def ShowToolTip(self, string):
        pos = QtCore.QPoint(self.ui.cpybtn.pos().x() + self.form.pos().x(), self.ui.cpybtn.pos().y() +
                            self.form.pos().y())
        QtWidgets.QToolTip.showText(pos, string, self.form)

    def ShowListTable(self, tableList):
        if len(tableList) == 0:
            itemList = []
            for i in range(3):
                itemList.append(QtWidgets.QTableWidgetItem())
                itemList[i].setText('')
                self.ui.tableWidget.setItem(0, i, itemList[i])

        for i in range(10):
            itemList = []
            for j in range(3):
                itemList.append(QtWidgets.QTableWidgetItem())
                self.ui.tableWidget.setItem(i, j, itemList[j])
        for i in range(len(tableList)):
            finds = self.db.SelectItem(tableList[i][0])
            item = QtWidgets.QTableWidgetItem()
            item.setText(tableList[i][0])
            self.ui.tableWidget.setItem(i, 0, item)

            item2 = QtWidgets.QTableWidgetItem()
            item2.setText(finds[0][1])
            self.ui.tableWidget.setItem(i, 1, item2)

            item3 = QtWidgets.QTableWidgetItem()
            item3.setText(str(finds[0][2]))
            self.ui.tableWidget.setItem(i, 2, item3)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    home = QtWidgets.QMainWindow()
    log = Logic(Form=home)
    home.show()
    sys.exit(app.exec_())
